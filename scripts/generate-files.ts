import minimist from 'minimist';
import { writeFile } from 'node:fs/promises';
import path from 'node:path';
import process from 'node:process';
import { oraPromise } from 'ora';
import { useRootDirname } from './utils';

type CommandArgs = {
  show?: boolean;
};

(() => run(process.argv))();

async function run(argv: string[]) {
  try {
    const args = minimist<CommandArgs>(argv.slice(2));

    await oraPromise(async () => {
      await generateFile(
        'packages/core/src/actions/variadic.ts',
        renderActionVariadicUse(15),
        args.show || false,
      );
    }, {
      text: 'Generating variadic...',
      successText: 'Generated variadic.',
    });
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}

function renderActionVariadicUse(size: number) {
  const renderUseSignature = (index: number) => {
    const generics = [
      'C1 extends {} = C',
      ...range(index).map((i) => `C${i + 2} extends C${i + 1} = C${i + 1}`),
    ].join(', ');
    const args = [
      'enhancer1: AnonymousEnhancer<C, C1>',
      ...range(index).map((i) => `enhancer${i + 2}: AnonymousEnhancer<C${i + 1}, C${i + 2}>`),
    ].join(', ');

    return `<${generics}>(${args}): Action<C${index + 1}>;`;
  };

  const renderRunSignature = (index: number) => {
    const generics = [
      'R',
      'C1 extends {} = C',
      ...range(index - 1).map((i) => `C${i + 2} extends C${i + 1} = C${i + 1}`),
    ].join(', ');
    const args = [
      'enhancer1: AnonymousEnhancer<C, C1>',
      ...range(index - 1).map((i) => `enhancer${i + 2}: AnonymousEnhancer<C${i + 1}, C${i + 2}>`),
      `runner: AnonymousRunner<C${index}, R>`,
    ].join(', ');

    return `<${generics}>(${args}): Promise<Awaited<R>>;`;
  };

  const renderActionUseMethod = (index: number) => `  use${renderUseSignature(index)}`;
  const renderActionRunMethod = (index: number) => `  run${renderRunSignature(index)}`;
  const renderActionUseFunction = (index: number) => `  ${renderUseSignature(index)}`;
  const renderActionRunFunction = (index: number) => `  ${renderRunSignature(index)}`;

  const content = `
/* eslint-disable max-len */
import type { Action, AnonymousEnhancer, AnonymousRunner } from '@foscia/core/actions/types';

// Do not edit this file, it is generated by \`pnpm generate-files\`.

/**
 * Variadic action use method signatures.
 *
 * @internal
 */
export type ActionVariadicUseMethod<C extends {}> = {
${range(size).map((index) => renderActionUseMethod(index + 1)).join('\n')}
};

/**
 * Variadic action run method signatures.
 *
 * @internal
 */
export type ActionVariadicRunMethod<C extends {}> = {
${range(size).map((index) => renderActionRunMethod(index + 1)).join('\n')}
};

/**
 * Variadic action use function signatures.
 *
 * @internal
 */
export type ActionVariadicUseFunction<C extends {}> = {
${range(size + 1).map((index) => renderActionUseFunction(index)).join('\n')}
};

/**
 * Variadic action run function signatures.
 *
 * @internal
 */
export type ActionVariadicRunFunction<C extends {}> = {
  <R>(runner: AnonymousRunner<C, R>): Promise<Awaited<R>>;
${range(size).map((index) => renderActionRunFunction(index + 1)).join('\n')}
};
`.trim();

  return `${content}\n`;
}

async function generateFile(file: string, content: string, show: boolean) {
  if (show) {
    console.log(`\n${content}`);
  } else {
    const rootDirname = useRootDirname();

    await writeFile(path.resolve(rootDirname, file), content);
  }
}

function range(size: number) {
  return Array.from(Array(size)).map((_, i) => i);
}

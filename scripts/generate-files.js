import minimist from 'minimist';
import { writeFile } from 'node:fs/promises';
import path from 'node:path';
import process from 'node:process';
import { oraPromise } from 'ora';
import { useRootDirname } from './utils.js';

(() => run(process.argv))();

async function run(argv) {
  try {
    const args = minimist(argv.slice(2));
    const options = {
      show: args.show || false,
    };

    await oraPromise(async () => {
      await generateFile(
        'packages/core/src/actions/actionVariadicUse.ts',
        renderActionVariadicUse(15),
        options.show,
      );
    }, {
      text: 'Generating actionVariadicUse...',
      successText: 'Generated actionVariadicUse.',
    });

    await oraPromise(async () => {
      await generateFile(
        'packages/core/src/actions/actionVariadicRun.ts',
        renderActionVariadicRun(15),
        options.show,
      );
    }, {
      text: 'Generating actionVariadicRun...',
      successText: 'Generated actionVariadicRun.',
    });
  } catch (error) {
    console.log(error);
    process.exit(1);
  }
}

function renderActionVariadicUse(size) {
  const renderMethod = (index) => {
    const generics = [
      'C1 extends {} = C',
      ...range(index).map((i) => `C${i + 2} extends C${i + 1} = C${i + 1}`),
    ].join(', ');
    const args = [
      'enhancer1: ContextEnhancer<C, C1>',
      ...range(index).map((i) => `enhancer${i + 2}: ContextEnhancer<C${i + 1}, C${i + 2}>`),
    ].join(', ');

    return `  use<${generics}>(${args}): Action<C${index + 1}>;`;
  };

  const content = `
/* eslint-disable max-len */
import type { Action, ContextEnhancer } from '@foscia/core/actions/types';

// Do not edit this file, it is generated by \`pnpm generate-files\`.

/**
 * Variadic action use methods type.
 *
 * @internal
 */
export type ActionVariadicUse<C extends {}> = {
${range(size).map((index) => renderMethod(index + 1)).join('\n')}
};
`.trim();

  return `${content}\n`;
}

function renderActionVariadicRun(size) {
  const renderMethod = (index) => {
    const generics = [
      'R',
      'C1 extends {} = C',
      ...range(index - 1).map((i) => `C${i + 2} extends C${i + 1} = C${i + 1}`),
    ].join(', ');
    const args = [
      'enhancer1: ContextEnhancer<C, C1>',
      ...range(index - 1).map((i) => `enhancer${i + 2}: ContextEnhancer<C${i + 1}, C${i + 2}>`),
      `runner: ContextRunner<C${index}, R>`,
    ].join(', ');

    return `  run<${generics}>(${args}): Promise<Awaited<R>>;`;
  };

  const content = `
/* eslint-disable max-len */
import type { ContextEnhancer, ContextRunner } from '@foscia/core/actions/types';

// Do not edit this file, it is generated by \`pnpm generate-files\`.

/**
 * Variadic action run methods type.
 *
 * @internal
 */
export type ActionVariadicRun<C extends {}> = {
${range(size).map((index) => renderMethod(index + 1)).join('\n')}
};
`.trim();

  return `${content}\n`;
}

async function generateFile(file, content, show) {
  if (show) {
    console.log(`\n${content}`);
  } else {
    const rootDirname = useRootDirname();

    await writeFile(path.resolve(rootDirname, file), content);
  }
}

function range(size) {
  return Array.from(Array(size)).map((_, i) => i);
}
